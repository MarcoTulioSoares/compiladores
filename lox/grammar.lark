?start     : program

program    : declaration*

?declaration : var_decl
             | stmt

var_decl   : "var" VAR ("=" expr)? ";"

?stmt      : expr ";"
           | print_cmd
           | block
           | if_cmd
           | while_cmd
           | for_cmd
           // | ...

print_cmd  : "print" expr ";"

block      : "{" stmt* "}"

if_cmd     : "if" "(" expr ")" stmt ["else" stmt]

while_cmd  : "while" "(" expr ")" stmt

for_cmd   : "for" "(" for_init for_cond ";" for_incr ")" stmt
for_init  : var_decl
          | expr ";"
          | ";"
for_cond  : expr?
for_incr  : expr?

// EXPRESSÃ•ES
?expr      : assign

?assign    : VAR "=" assign   -> assign
           | equality

?equality  : comparison
           | equality "==" comparison   -> eq
           | equality "!=" comparison   -> ne

?comparison: term
           | comparison ">" term        -> gt
           | comparison ">=" term       -> ge
           | comparison "<" term        -> lt
           | comparison "<=" term       -> le

?term      : factor
           | term "+" factor            -> add
           | term "-" factor            -> sub

?factor    : unary
           | factor "*" unary           -> mul
           | factor "/" unary           -> div

?unary     : (NOT | MINUS) unary   -> unary
           | atom

?logical_or: logical_and ("or" logical_and)*

?logical_and: equality ("and" equality)*

atom       : NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | "(" expr ")"
           | call

call       : VAR "(" params ")"
params     : [ expr ("," expr )* ]

// Tokens
BOOL.2     : "true" | "false"
VAR.1      : /[a-z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
NOT        : "!"
MINUS      : "-"
PLUS       : "+"
STAR       : "*"
SLASH      : "/"
GREATER    : ">"
GREATER_EQUAL : ">="
LESS       : "<"
LESS_EQUAL : "<="
EQUAL_EQUAL : "=="
BANG_EQUAL : "!="
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT