?start     : program

program    : stmt*

var_decl   : "var" VAR ("=" expr)? ";"

fun_decl   : "fun" VAR "(" fun_parameters ")" block

fun_parameters : [ VAR ("," VAR)* ]

?stmt      : expr ";"
           | print_cmd
           | return_cmd
           | block
           | if_cmd
           | while_cmd
           | for_cmd
           | var_decl
           | fun_decl
           | class_decl
           // | ...

print_cmd  : "print" expr ";"

return_cmd : "return" expr? ";"

block      : "{" stmt* "}"

if_cmd     : "if" "(" expr ")" stmt ["else" stmt]

while_cmd  : "while" "(" expr ")" stmt

for_cmd   : "for" "(" for_init for_cond ";" for_incr ")" stmt
for_init  : var_decl
          | expr ";"
          | ";"
for_cond  : expr?
for_incr  : expr?

// EXPRESSÃ•ES
?expr      : assign

?assign: call "=" assign   -> assign
       | logic_or

var_target: VAR

?logic_or  : logic_and ("or" logic_and)*
?logic_and : equality ("and" equality)*

equality  : comparison
           | equality "==" comparison   -> eq
           | equality "!=" comparison   -> ne

comparison: term
           | comparison ">" term        -> gt
           | comparison ">=" term       -> ge
           | comparison "<" term        -> lt
           | comparison "<=" term       -> le

term      : factor
           | term "+" factor            -> add
           | term "-" factor            -> sub

factor    : unary
           | factor "*" unary           -> mul
           | factor "/" unary           -> div

unary     : (NOT | MINUS) unary   -> unary
           | call

?call     : primary ( ("(" params ")") | ("." VAR) )*

?primary  : NUMBER
           | BOOL
           | VAR
           | STRING
           | NIL
           | THIS
           | "(" expr ")"

params     : (expr ("," expr)*)?

// Tokens
THIS.10     : "this"
BOOL.2     : "true" | "false"
VAR.1      : /[a-zA-Z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
NOT        : "!"
MINUS      : "-"
PLUS       : "+"
STAR       : "*"
SLASH      : "/"
GREATER    : ">"
GREATER_EQUAL : ">="
LESS       : "<"
LESS_EQUAL : "<="
EQUAL_EQUAL : "=="
BANG_EQUAL : "!="
SEMICOLON  : ";"
LPAR       : "("
RPAR       : ")"
DOT        : "."
EQUAL      : "="
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT

class_decl : "class" VAR ["<" VAR] "{" class_body "}"

class_body : [ method_decl* ]

method_decl : VAR "(" fun_parameters ")" block